{"version":3,"sources":["components/Header/index.js","components/Post/index.js","components/Notifier/index.js","components/Posts/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","React","Component","Post","nickname","this","props","avatar","image","caption","ref","src","alt","Notifier","data","Posts","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","posts","offline","navigator","onLine","_this2","Notification","requestPermission","setState","JSON","parse","localStorage","getItem","apollo_client","query","gql","_templateObject","then","response","setItem","stringify","posts_channel","pusher","subscribe","bind","concat","post","permission","body","user","icon","onclick","event","window","open","e","console","log","notify","components_Notifier","slice","reverse","map","components_Post","key","id","client","ApolloClient","uri","App","Pusher","cluster","encrypted","prototype","react_apollo_esm","components_Header","components_Posts","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.56a9fa59.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nclass Header extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<nav className = \"Nav\">\n\t\t\t\t<div className = \"Nav-menus\">\n\t\t\t\t\t<div className = \"Nav-brand\">\n\t\t\t\t\t\t<a className = \"Nav-brand-logo\" href = \"/\">\n\t\t\t\t\t\t\tInstagram\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t);\n\t}\n}\n\nexport default Header;","import React, {Component} from \"react\";\nimport \"./Post.css\";\n\nclass Post extends Component {\n\trender() {\n\t\tconst nickname = this.props.nickname;\n\t\tconst avatar = this.props.avatar;\n\t\tconst image = this.props.image;\n\t\tconst caption = this.props.caption;\n\t\treturn (\n\t\t\t<article className = \"Post\" ref = \"Post\">\n\t\t\t\t<header>\n\t\t\t\t\t<div className = \"Post-user\">\n\t\t\t\t\t\t<div className = \"Post-user-avatar\">\n\t\t\t\t\t\t\t<img src = {avatar}\n\t\t\t\t\t\t\talt = {nickname}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className = \"Post-user-nickname\">\n\t\t\t\t\t\t\t<span>{nickname}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t\t<div className = \"Post-image\">\n\t\t\t\t\t<div className = \"Post-image-bg\">\n\t\t\t\t\t\t<img alt = {caption} \n\t\t\t\t\t\tsrc = {image}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"Post-caption\">\n\t\t\t\t\t<strong>{nickname}></strong> \n\t\t\t\t\t{caption}\n\t\t\t\t</div>\n\t\t\t</article>\n\t\t);\n\t}\n}\n\nexport default Post;","import React, {Component} from \"react\";\nimport \"./Notifier.css\";\n\nclass Notifier extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className = \"notify\">\n\t\t\t\t<p>\n\t\t\t\t\t<em>{this.props.data}</em>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Notifier;","\nimport React, {Component} from \"react\";\nimport \"./Posts.css\";\nimport gql from \"graphql-tag\";\nimport Post from \"../Post\";\nimport Notifier from \"../Notifier\";\n\nclass Posts extends Component {\n  constructor() {\n    super();\n    this.state = {\n      posts: []\n    };\n    this.offline = !navigator.onLine;\n  }\n\n  componentDidMount() {\n    Notification.requestPermission();\n    if (this.offline) {\n      this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\n    } else {\n      this.props.apollo_client.query({\n          query: gql`{\n              posts(user_id: \"a\") {\n                id\n                user {\n                  nickname\n                  avatar\n                }\n                image\n                caption\n              }\n            }`\n        })\n        .then(response => {\n          this.setState({ posts: response.data.posts });\n          localStorage.setItem(\"posts\", JSON.stringify(response.data.posts));\n        });\n    }\n    this.posts_channel = this.props.pusher.subscribe(\"posts-channel\");\n    this.posts_channel.bind(\n      \"new-post\",\n      data => {\n        this.setState({ posts: this.state.posts.concat(data.post) });\n        if (Notification.permission === \"granted\") {\n          try {\n            let notification = new Notification(\"Pusher Instagram Clone\", {\n              body: `New post from ${data.post.user.nickname}`,\n              icon: \"https://img.stackshare.io/service/115/Pusher_logo.png\",\n              image: `${data.post.image}`\n            });\n            notification.onclick = function(event) {\n              window.open(\"http://localhost:3000\", \"_blank\");\n            };\n          } catch (e) {\n            console.log(\"Error displaying notification\");\n          }\n        }\n      },\n      this\n    );\n  }\n\n  render() {\n    const notify = this.offline ? <Notifier data=\"Instagram Clone: Offline Mode\" /> : <span />;\n    return (\n      <div>\n        {notify}\n        <div className=\"Posts\">\n          {this.state.posts.slice(0).reverse().map(post => (\n              <Post\n                nickname={post.user.nickname}\n                avatar={post.user.avatar}\n                image={post.image}\n                caption={post.caption}\n                key={post.id}\n              />\n            ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Posts;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Posts from './components/Posts';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from \"react-apollo\";\nimport Pusher from 'pusher-js';\n\nconst client = new ApolloClient ({\n  uri: \"http://localhost:4000/graphql\"\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.pusher = new Pusher(\"PUSHER_APP_KEY\", {\n      cluster: 'eu',\n      encrypted: true\n    });\n  }\n\n  componentDidMount() {\n    if('actions' in Notification.prototype) {\n      console.log('Notification');\n    }\n    else {\n      console.log('No Nofications');\n    }\n  }\n\n  render() {\n    return ( \n      <ApolloProvider client = {client}>\n        <div className = \"App\">\n          <Header />\n          <section className = \"App-main\">\n            <Posts pusher = {this.pusher} apollo_client = {client}/>\n          </section>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}